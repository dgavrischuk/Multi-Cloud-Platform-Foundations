  name: 'GCP VPC Deployment Tests'
  on:
    push:
      branches:
        - main
        - develop
        - bug/INFRA-45/GCP_Deployment_Test_Fail
  jobs:
    deployment-tests:
      name: 'Deployment tests'
      runs-on: ubuntu-latest

      env:
        working-directory: ./tests/gcp/deployment
        NEW_PROJECT_ID: "test-vpc-${GITHUB_SHA::8}-$(date +%s)"

      defaults:
        run:
          shell: bash
          working-directory: ${{env.working-directory}}

      steps:
        - name: Checkout
          uses: actions/checkout@v2


        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_wrapper: false

        # Install gcloud sdk and set the service account
        - name: Setup Cloud SDK
          uses: google-github-actions/setup-gcloud@master
          with:
            service_account_key: ${{secrets.GCP_SA_KEY}}
            export_default_credentials: true

        - name: Install Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.x'

        - name: Validate Yaml
          run: |
            python -m pip install --upgrade pip
            pip install PyYAML jsonschema
            cd access_context_manager/yaml_validation
            python yaml_validation.py

        - name: Set constant variables
          id: vars
          run: echo "::set-output name=GCP_PROJECT_ID::${{ env.NEW_PROJECT_ID }}"


        - name: Setup GCP
          run: |
            gcloud projects create "${{ steps.vars.outputs.GCP_PROJECT_ID }}-1" --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
            gcloud components install beta --quiet
            gcloud beta billing projects link ${{ steps.vars.outputs.GCP_PROJECT_ID }}-1 --billing-account=${{secrets.GCP_BILLING_ID}}
            gcloud services enable cloudresourcemanager.googleapis.com
            gcloud projects create "${{ steps.vars.outputs.GCP_PROJECT_ID }}-2" --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
            gcloud beta billing projects link ${{ steps.vars.outputs.GCP_PROJECT_ID }}-2 --billing-account=${{secrets.GCP_BILLING_ID}}
            gcloud services enable cloudresourcemanager.googleapis.com
            gcloud config set compute/zone europe-west2-a

        - name: Configure files
          run: |
            cd access_context_manager
            sed -i "s|access-policy-name|${{secrets.ACCESS_POLICY}}|" main.tf
            sed -i "s|resources-list|[\"${{steps.vars.outputs.GCP_PROJECT_ID}}-1\",\"${{steps.vars.outputs.GCP_PROJECT_ID}}-2\"]|" main.tf
            sed -i "s|source-path|../../../../gcp/access_context_manager/service_perimeter_regular|" main.tf
            sed -i "s|project-1|${{ steps.vars.outputs.GCP_PROJECT_ID }}-1|" ingressPolicies.yml
            sed -i "s|project-2|${{ steps.vars.outputs.GCP_PROJECT_ID }}-2|" ingressPolicies.yml

        - name: Deploy perimeter
          run: |
            cd access_context_manager
            export TF_LOG=TRACE
            export TF_LOG_PATH="${GITHUB_WORKSPACE}/.github/workflows/log_files/vpc_logs.tflogs"
            terraform init
            terraform plan -out="./plan.tfplan"
            terraform apply plan.tfplan

        - uses: actions/upload-artifact@v2
          if: ${{ failure() }}
          with:
            path: ${{ github.workspace }}/.github/workflows/log_files/vpc_logs.tflogs
            retention-days: 1

        - name: delete projects
          if : ${{ always() }}
          run: |
            gcloud projects delete ${{ steps.vars.outputs.GCP_PROJECT_ID }}-1
            gcloud projects delete ${{ steps.vars.outputs.GCP_PROJECT_ID }}-2